------------------------------------------------------------------------
-- This query calculates ownership at the MMSI level to match the
-- scale of the fishing effort data. A vessel may use multiple MMSIs
-- and therefore will be represented across multiple rows.
-- Alternatively, multiple distinct vessels (different vessel_record_ids)
-- may be using the same MMSI (identity spoofing). MMSI that are used by 
-- distinct vessels during overlapping time periods are marked as such so 
-- they can be filtered out of analysis as needed.
--
-- Last updated: 2021-08-19
------------------------------------------------------------------------


--------------------------------------------------------------------------------
-- FUNCTION:
-- Check if there are overlapping timestamp ranges in the given array
-- of timestamp ranges (each consisting of first timestamp and last timestamp).
-- If at least one timestamp range does overlap with another time range
-- the function returns TRUE. If no time ranges overlaps, it then returns FALSE.
-- 
-- INPUT: Array of Struct where each Struct has an activity range for an MMSI.
--------------------------------------------------------------------------------
CREATE TEMP FUNCTION check_timestamp_overlap (
    arr ARRAY<STRUCT<first_timestamp TIMESTAMP, last_timestamp TIMESTAMP>>) AS ((
  WITH
    ------------------------------------
    -- Flatten the given array of struct
    ------------------------------------
    ts AS (
      SELECT first_timestamp, last_timestamp
      FROM UNNEST (arr)
    ),

    -----------------------------------------------
    -- Cross join all time ranges except themselves
    -- to determine there is an overlap of time
    -----------------------------------------------
    compare_ts AS (
      SELECT
        a.first_timestamp < b.last_timestamp
        AND a.last_timestamp > b.first_timestamp AS overlap
      FROM ts AS a
      CROSS JOIN ts AS b
      WHERE NOT (a.first_timestamp = b.first_timestamp
        AND a.last_timestamp = b.last_timestamp)
    )

  -------------------------------------------------------------------
  -- If only one time range per vessel is given, there is no overlap.
  -- Otherwise, determine by Logical OR if there is an overlap
  -------------------------------------------------------------------
  SELECT
    IF (COUNT (*) <= 1,
      FALSE,
      IF (LOGICAL_OR (overlap) IS NULL,
        NULL, LOGICAL_OR (overlap) ) )
  FROM compare_ts
));



WITH 

--------------------------------------------------------------------------------
-- Get mapping of territory flags to the flag of the sovereign country.
-- Used to better characterize foreign ownership.
--------------------------------------------------------------------------------
territory_flag_mapping AS (
    SELECT DISTINCT
    territory1_iso3, sovereign1_iso3
    FROM `{{PROJECT}}.{{EEZ_INFO_TABLE}}`
    WHERE eez_type = '200NM'
    AND territory1_iso3 != sovereign1_iso3
),

--------------------------------------------------------------------------------
-- Get all identities from the sample database release with key attributes
-- such as geartype and time ranges
--------------------------------------------------------------------------------
all_identities AS (
    SELECT 
    vessel_record_id,
    ssvid,
    IFNULL(n_shipname, 'null') as n_shipname,
    IFNULL(n_callsign, 'null') as n_callsign,
    IFNULL(flag, 'null') as flag,
    geartype,
    first_timestamp,
    last_timestamp,
    is_fishing,
    is_carrier,
    is_bunker
    FROM `{{PROJECT}}.{{IDENTITY_TABLE}}`
),

--------------------------------------------------------------------------------
-- Get all ownership information from the sample database release.
--------------------------------------------------------------------------------
all_ownership AS (
    SELECT 
    vessel_record_id,
    ssvid,
    IFNULL(n_shipname, 'null') as n_shipname,
    IFNULL(n_callsign, 'null') as n_callsign,
    IFNULL(flag, 'null') as flag,
    owner,
    owner_flag
    FROM `{{PROJECT}}.{{OWNER_TABLE}}`
),

--------------------------------------------------------------------------------
-- Join identities with ownership information using vessel_record_id, ssvid, 
-- n_shipname, n_callsign, and flag.
-- Remove the few times were the identity has a null flag.
--------------------------------------------------------------------------------
identities_with_ownership AS (
    SELECT
    vessel_record_id,
    ssvid,
    n_shipname,
    n_callsign,
    flag,
    IFNULL((SELECT sovereign1_iso3 FROM territory_flag_mapping WHERE territory1_iso3 = flag), flag) as flag_sovereign,
    owner,
    owner_flag,
    IFNULL((SELECT sovereign1_iso3 FROM territory_flag_mapping WHERE territory1_iso3 = owner_flag), owner_flag) as owner_flag_sovereign,
    FROM all_identities 
    LEFT JOIN all_ownership 
    USING(vessel_record_id, ssvid, n_shipname, n_callsign, flag)
    WHERE flag != 'null'
    ORDER BY n_shipname, n_callsign, ssvid, flag, owner, owner_flag
),

--------------------------------------------------------------------------------
-- Gather all of the flags for non-null owners for each identity.
-- This is necessary to properly handle flags coming from null owners so that
-- only flags not already represented by non-null owners are included in 
-- `identities_final`.
--------------------------------------------------------------------------------
identities_flags_for_nonnull_owners AS (
    SELECT
    vessel_record_id, n_shipname, n_callsign, flag,
    ARRAY_AGG(DISTINCT owner_flag_sovereign) AS flags_for_nonnull_owners
    FROM identities_with_ownership
    WHERE owner IS NOT NULL
    GROUP BY vessel_record_id, n_shipname, n_callsign, flag
),

--------------------------------------------------------------------------------
-- Gather all of the SSVIDs used by an identity where identity is defined as 
-- above but without `ssvid`.
--------------------------------------------------------------------------------
ssvid_for_all_owners AS (
    SELECT
    vessel_record_id, n_shipname, n_callsign, flag,
    ARRAY_AGG(DISTINCT ssvid) AS ssvids_used
    FROM identities_with_ownership
    GROUP BY vessel_record_id, n_shipname, n_callsign, flag 
),

--------------------------------------------------------------------------------
-- For each unique combination of identity and ownership information, classify 
-- it as foreign, domestic, or unknown. Null owners are included only if their 
-- flag is not already specified for an identity by a non-null owner to avoid 
-- duplication from varying quality of registries.
--------------------------------------------------------------------------------
identities_with_ownership_classified AS (
    SELECT DISTINCT
    vessel_record_id, n_shipname, n_callsign, flag, flag_sovereign,
    owner, owner_flag, owner_flag_sovereign,
    IF(owner_flag_sovereign IS NOT NULL AND flag_sovereign NOT IN (owner_flag_sovereign, owner_flag), 1, 0) as is_foreign,
    IF(owner_flag_sovereign IS NOT NULL AND flag_sovereign IN (owner_flag_sovereign, owner_flag), 1, 0) as is_domestic,
    IF(owner_flag_sovereign IS NULL, 1, 0) as is_unknown,
    FROM identities_with_ownership
    LEFT JOIN identities_flags_for_nonnull_owners USING(vessel_record_id, n_shipname, n_callsign, flag)
    WHERE (owner IS NOT NULL OR (owner_flag_sovereign IS NULL OR owner_flag_sovereign NOT IN UNNEST(flags_for_nonnull_owners)))
),

------------------------------------------------------------------------------------------------------------------
-- Collapse ownership information by identity (vessel_record_id, n_shipname, n_callsign, flag)
-- and count how many of the owners were foreign, domestic or unknown.
-- Ignore unknown identities when vessels have other known ownerships
-- If all known ownership is foreign or domestic, classify the identity as is_foreign or is_domestic, respectively.
-- If all ownerships are unknown, classify the identity as is_unknown.
-- If there is a mixture of known foreign and domestic owners, classify as is_foreign_and_domestic.
-------------------------------------------------------------------------------------------------------------------
identities_classified AS (
SELECT 
vessel_record_id, n_shipname, n_callsign, flag,
IF(SUM(is_foreign) > 0 AND SUM(is_domestic) = 0, TRUE, FALSE) as is_foreign,
IF(SUM(is_foreign) = 0 AND SUM(is_domestic) > 0, TRUE, FALSE) as is_domestic,
IF(SUM(is_foreign) > 0 AND SUM(is_domestic) > 0, TRUE, FALSE) as is_foreign_and_domestic,
IF(SUM(is_foreign) = 0 AND SUM(is_domestic) = 0 AND SUM(is_unknown) > 0, TRUE, FALSE) as is_unknown,
COUNT(*) AS num_owners
FROM identities_with_ownership_classified
GROUP BY vessel_record_id, n_shipname, n_callsign, flag
),

--------------------------------------------------------------------------------
-- Join the final classified identities with the list of SSVID they are 
-- associated with.
--------------------------------------------------------------------------------
identities_classified_with_ssvid AS (
SELECT 
*
FROM identities_classified
LEFT JOIN ssvid_for_all_owners USING(vessel_record_id, n_shipname, n_callsign, flag)
ORDER BY num_owners DESC
),

--------------------------------------------------------------------------------
-- Unnest SSVIDs for each identity so that there is a row for each SSVID in an
-- identity.
-- Join with `all_identities` to get the additional attributes for that identity
-- such as geartype and the time range for which the identity is valid.
--------------------------------------------------------------------------------
identities_by_ssvid AS (
SELECT
    ssvid AS mmsi, vessel_record_id, 
    IF(n_shipname = 'null', NULL, n_shipname) AS n_shipname, 
    IF(n_callsign = 'null', NULL, n_callsign) AS n_callsign, 
    IF(flag = 'null', NULL, flag) AS flag, 
    is_domestic, is_foreign, is_foreign_and_domestic, is_unknown,
    geartype, first_timestamp, last_timestamp, is_fishing, is_carrier, is_bunker
    FROM identities_classified_with_ssvid, UNNEST(ssvids_used) ssvid
    LEFT JOIN all_identities USING(ssvid, vessel_record_id, n_shipname, n_callsign, flag)
)

--------------------------------------------------------------------------------
-- Check which SSVID have identities that overlap in time and join that
-- information to the final table.
--------------------------------------------------------------------------------
SELECT 
*
FROM identities_by_ssvid
JOIN (SELECT 
      mmsi,
      check_timestamp_overlap(ARRAY_AGG(STRUCT(first_timestamp as first_timestamp, last_timestamp as last_timestamp))) AS overlapping_identities_for_mmsi
      FROM identities_by_ssvid
      GROUP BY mmsi)
USING (mmsi)